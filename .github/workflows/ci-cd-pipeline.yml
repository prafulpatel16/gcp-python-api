name: CI/CD Pipeline

on:
  push:
    branches:
    - master

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10' # Update this to a supported version, e.g., 3.10
        architecture: 'x64'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Lint code with pylint
      run: |
        pylint app/main.py

    - name: Run unit tests with pytest
      run: |
        pytest tests/test_main.py 

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: ~/.docker/buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Install Docker Scout CLI
      run: |
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        # Add Docker Scout installation directory to $PATH
        echo "/home/runner/.docker/cli-plugins" >> $GITHUB_ENV
        # Verify Docker Scout is installed and available
        docker-scout --version

    - name: Log in to Google Cloud Docker registry
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Build Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:v1.0.0 \
          -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:latest \
          -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:$GITHUB_SHA .

    - name: Scan Docker image with Docker Scout
      run: |
        docker-scout start gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:$GITHUB_SHA
        docker-scout results

    - name: Push Docker image to Artifact Registry
      run: |
        # Push the image with multiple tags
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:v1.0.0
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:$GITHUB_SHA

  deploy:
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy fastapi-app \
          --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapi-app:v1.0.0 \
          --region=us-central1 \
          --platform=managed \
          --allow-unauthenticated \
          --quiet

    - name: Get the Cloud Run service URL
      id: cloudrun_url
      run: |
        RUN_URL=$(gcloud run services describe fastapi-app --region=us-central1 --platform=managed --format="value(status.url)")
        echo "Cloud Run service URL: $RUN_URL"
        echo "RUN_URL=$RUN_URL" >> $GITHUB_ENV

    - name: Create Uptime Check (if not exists)
      run: |
        if ! gcloud monitoring uptime-checks describe fastapi-health-check; then
          gcloud monitoring uptime-checks create http fastapi-health-check \
            --host=${{ env.RUN_URL }} \
            --path=/healthz \
            --port=443 \
            --check-interval=60s \
            --timeout=10s
        fi

    - name: Enable Cloud Logging
      run: |
        gcloud logging write fastapi-logs "Cloud Run deployed successfully at ${{ env.RUN_URL }}" --severity=INFO
