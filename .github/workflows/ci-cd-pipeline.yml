# .github/workflows/main.yml

name: CI/CD Pipeline

on:
  push:
    branches:
    - master # Triggers the workflow on pushes to the master branch

jobs:
  ###########################################
  # 1. LINT & TEST: Validate the code quality
  ###########################################
  lint_and_test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Use latest version

    - name: Set up Python 3.10
      uses: actions/setup-python@v4 # Use latest version
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint code with pylint
      run: pylint app/main.py

    - name: Run unit tests with pytest
      run: pytest tests/test_main.py

  ###############################################################
  # 2. BUILD & PUSH: Build, Scan, and Push the Docker image
  ###############################################################
  build_and_push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: lint_and_test # This job runs only after lint_and_test succeeds

    # Set environment variables for easy reuse and maintenance
    env:
      REGISTRY_HOSTNAME: us-central1-docker.pkg.dev # Change to your Artifact Registry region
      IMAGE_NAME: fastapi-repo-dev/fastapi-app-dev # Change to your Artifact Registry repo and image name
      # IMAGE_FULL_NAME will be composed as: us-central1-docker.pkg.dev/your-project/fastapi-repo/fastapi-app
      IMAGE_FULL_NAME: ${{ secrets.GCP_PROJECT_ID }}/${{ vars.IMAGE_NAME || 'fastapi-repo-dev/fastapi-app-dev' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY_HOSTNAME }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image with multiple tags
      run: |
        docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:v1.0.0 \
          -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:latest \
          -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:${{ github.sha }} \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          .

    - name: Scan Docker image with Docker Scout
      uses: docker/scout-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }} # Docker Hub username
        dockerhub-password: ${{ secrets.DOCKERHUB_PASSWORD }} # Docker Hub access token
        command: cves
        # FIXED: Use ${{ github.sha }} expression syntax
        image: ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:${{ github.sha }}
        only-severities: critical,high
        exit-code: false # Fails the step if vulnerabilities are found
        write-comment: true # Posts a summary to the commit/PR
        summary: true # Adds a detailed report to the Actions Job Summary page
        format: sarif # Choose an output format for artifacts
        output: scout-report.sarif # Define the output file name

    - name: Push Docker images to Artifact Registry
      # This pushes all tags (v1.0.0, latest, and the commit SHA) at once
      run: |
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:v1.0.0
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:latest
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:${{ github.sha }}

  ##################################################
  # 3. DEPLOY: Deploy the image to Google Cloud Run
  ##################################################
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build_and_push # This job runs only after build_and_push succeeds

    env:
      REGISTRY_HOSTNAME: us-central1-docker.pkg.dev # Must match the build job
      IMAGE_NAME: fastapi-repo-dev/fastapi-app-dev # Must match the build job
      IMAGE_FULL_NAME: ${{ secrets.GCP_PROJECT_ID }}/${{ vars.IMAGE_NAME || 'fastapi-repo-dev/fastapi-app-dev' }}
      SERVICE_NAME: fastapi-app-dev # Name of the Cloud Run service

    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ env.REGISTRY_HOSTNAME }}/${{ env.IMAGE_FULL_NAME }}:v1.0.0 \
          --region=us-central1 \
          --platform=managed \
          --allow-unauthenticated \
          --quiet

    - name: Get the Cloud Run service URL
      id: get_url
      run: |
        SERVICE_URL=$(gcloud run services describe fastapi-app --platform=managed --region=us-central1 --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "Service deployed successfully at: $SERVICE_URL"

    - name: Set up environment
      run: |
        # Strip protocol and path from SERVICE_URL
        export CLEAN_HOST=${SERVICE_URL#*//}
        export CLEAN_HOST=${CLEAN_HOST%%/*}
        echo "CLEAN_HOST=$CLEAN_HOST" >> $GITHUB_ENV

    - name: Create Cloud Monitoring Uptime Check
      run: |
        gcloud monitoring uptime create "FastAPI Uptime Check Dev" \
          --resource-type=uptime-url \
          --resource-labels=host=${{ env.CLEAN_HOST }},project_id=${{ secrets.GCP_PROJECT_ID }} \
          --protocol=https \
          --path="/helloworld" \
          --port=443 \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          || echo "Uptime check 'FastAPI Uptime Check Dev' already exists or failed to create, continuing."

    - name: Write Deployment Log to Cloud Logging
      run: |
        gcloud logging write deploy-logs "Successfully deployed image to Cloud Run service [fastapi-app]. URL: ${{ env.SERVICE_URL }}" --payload-type=text --severity=INFO
